from tkinter import *
from tkinter import simpledialog, messagebox
import functions as f
import database as db


class MainGUI:
    def __init__(self, master):
        self.master = master
        master.title("Random Password Generator")
        master.geometry("600x300")
        master.resizable(False, False)
        master.rowconfigure(1, weight=1)
        master.columnconfigure(1, weight=1)

        self.leftFrame = Frame(master, width=280, height=230, bg="#dddddd")
        self.leftFrame.grid(row=1, column=1, sticky="nsew")

        self.rightFrame = Frame(master, width=320, height=320, bg="#f5f3f4")
        self.rightFrame.grid(row=1, column=3, sticky="nsew")
        self.introduction_label = Label(self.leftFrame, text="RANDOM PASSWORD GENERATOR", bg="#dddddd",
                                        font=("Times", 14))
        self.introduction_label.place(x=135, y=75, anchor="center")

        self.intro2_label = Label(self.leftFrame,
                                  text="This application generates a random password for you, as well, as it creates a database, which you can view / edit and adjust to your liking",
                                  bg="#dddddd", font=("Times", 13), wraplengt=200)
        self.intro3_label = Label(self.leftFrame,
                                  text="Password is generated by combining randomly chosen letters - either uppercase or lowercase and numbers",
                                  bg="#dddddd", font=("Times", 13), wraplengt=200)

        self.intro4_label = Label(self.leftFrame, text="*Password should be between 6 and 20 characters long",
                                  bg="#dddddd",
                                  font=("Times", 12), wraplengt=200)

        self.intro2_label.place(x=140, y=130, anchor="center")
        self.intro3_label.place(x=140, y=190, anchor="center")
        self.intro4_label.place(x=140, y=260, anchor="center")

        self.label_input_field1 = Label(self.rightFrame, text="Password should contain ", bg="#f5f3f4",
                                        font=("Times", 13))
        self.label_input_field2 = Label(self.rightFrame, text=" characters. ", bg="#f5f3f4", font=("Times", 13))
        self.button_generate = Button(self.rightFrame, text="GO", bg="#f5f3f4", font=("Times", 10),
                                      command=self.password_generation)
        self.input_char = Entry(self.rightFrame)
        self.input_char.insert(0, "12")
        self.input_char.focus()
        self.label_input_field1.place(x=20, y=95)
        self.input_char.place(x=157, y=95, width=25, height=20)
        self.label_input_field2.place(x=185, y=95)
        self.button_generate.place(x=250, y=95, width=40, height=20)

        self.password_field = Entry(self.rightFrame)
        self.password_field.place(x=130, y=145, width=120, height=30, anchor=CENTER)
        self.button_copy = Button(self.rightFrame, text="COPY", font=("Times", 10), command=self.copy_pass)
        self.button_copy.place(x=230, y=145, width=60, height=30, anchor=CENTER)

        self.button_save = Button(self.rightFrame, text="Save to DB", font=("Times", 10), command=self.save_entry)
        self.button_show = Button(self.rightFrame, text="Show DB", font=("Times", 10), command=self.show_db)
        self.button_edit = Button(self.rightFrame, text="Edit DB", font=("Times", 10), command=self.edit_field)

        self.button_save.place(x=15, y=185, width=80, height=30)
        self.button_show.place(x=115, y=185, width=80, height=30)
        self.button_edit.place(x=215, y=185, width=80, height=30)

    def save_entry(self):
        EntryField(self.master, "Save Entry")

    def edit_field(self):
        EditField(self.master, "Edit Entry")

    def copy_pass(self):
        generated = self.password_field.get()
        f.copy_pass(generated)

    def password_generation(self):
        self.password_field.delete(0, END)
        password_length = int(self.input_char.get())
        if password_length < 6 or password_length > 20:
            messagebox.showerror("error", "password should be between 6 and 20 characters")
        else:
            password = f.password_generation(password_length)
            self.password_field.insert(0, password)

    def show_db(self):
        base = Toplevel(self.master, bg="#dddddd")
        base.geometry("500x500")
        base.title("Records")
        Label(base, text="DATABASE ENTRIES: ", bg="#dddddd", font=("Times", 15)).place(x=175, y=10)
        Label(base, text=f"{db.show_records()}", bg="#dddddd", font=("Times", 13)).place(x=60, y=50)


class EditField(simpledialog.Dialog):

    def body(self, master):
        ID_label = Label(master, text="ID: ")
        platform_label = Label(master, text="Platform: ")
        name_label = Label(master, text="Username: ")
        password_label = Label(master, text="Password: ")
        date_label = Label(master, text="Logged on: ")

        self.ID = Entry(master, width=2)
        self.platform_field = Entry(master)
        self.name_field = Entry(master)
        self.password_field = Entry(master)
        self.date_field = Entry(master)

        self.ID.grid(row=0, column=1, sticky="W")
        self.platform_field.grid(row=1, column=1)
        self.name_field.grid(row=2, column=1)
        self.password_field.grid(row=3, column=1)
        self.date_field.grid(row=4, column=1)

        ID_label.grid(row=0, column=0)
        platform_label.grid(row=1, column=0)
        name_label.grid(row=2, column=0)
        password_label.grid(row=3, column=0)
        date_label.grid(row=4, column=0)

        self.button_save_changes = Button(master, text="Save changes", command=self.validation_save)
        self.button_delete_entry = Button(master, text="Delete selected entry", command=self.delete)

        self.gather_button = Button(master, text="Search DB for ID", command=self.get_id)
        self.gather_button.grid(row=6, column=0)

        self.button_save_changes.grid(row=6, column=1)
        self.button_delete_entry.grid(row=6, column=2)

    def validation_save(self):

        id_no = self.ID.get()
        platform = self.platform_field.get()
        name = self.name_field.get()
        password = self.password_field.get()
        date = self.date_field.get()
        if platform == "" or name == "" or password == "" or date == "":
            messagebox.showerror("error", "Some of the fields are blank")
        else:
            db.update(id_no, platform, name, password, date)
            messagebox.showinfo("Done", "Entry updated succesfully")

    def delete(self):
        id_delete = int(self.ID.get())
        total_rec = db.fetch_all()

        def is_found():
            db.delete_entry(id_delete)
            messagebox.showinfo("Done", "Entry deleted succesfully")
            self.ID.delete(0, END)
            self.platform_field.delete(0, END)
            self.name_field.delete(0, END)
            self.password_field.delete(0, END)
            self.date_field.delete(0, END)

        def not_found():
            messagebox.showerror("Error", "ID is not found")

        if f.id_found(total_rec, id_delete):
            is_found()
        else:
            not_found()

    def get_id(self):
        id_selected = int(self.ID.get())
        total_rec = db.fetch_all()

        def is_found():
            entries = db.fetch_one(str(id_selected))
            self.platform_field.delete(0, END)
            self.name_field.delete(0, END)
            self.password_field.delete(0, END)
            self.date_field.delete(0, END)

            for entry in entries:
                self.platform_field.insert(0, entry[1])
                self.name_field.insert(0, entry[2])
                self.password_field.insert(0, entry[3])
                self.date_field.insert(0, entry[4])

        def not_found():
            self.platform_field.delete(0, END)
            self.name_field.delete(0, END)
            self.password_field.delete(0, END)
            self.date_field.delete(0, END)
            messagebox.showerror("error", "ID is not found")

        if f.id_found(total_rec, id_selected):
            is_found()
        else:
            not_found()


class EntryField(simpledialog.Dialog):

    def body(self, master):
        Label(master, text="Platform: ").grid(row=0)
        Label(master, text="Username: ").grid(row=1)
        Label(master, text="Password: ").grid(row=2)

        self.platform_entry = Entry(master)
        self.username_entry = Entry(master)
        self.password_entry = Entry(master)

        self.platform_entry.grid(row=0, column=1)
        self.username_entry.grid(row=1, column=1)
        self.password_entry.grid(row=2, column=1)

    def apply(self):
        platform = self.platform_entry.get()
        name = self.username_entry.get()
        password = self.password_entry.get()
        if platform == "" or name == "" or password == "":
            messagebox.showerror("error", "some of the fields are blank")
        else:
            db.create_entry(platform, name, password)
